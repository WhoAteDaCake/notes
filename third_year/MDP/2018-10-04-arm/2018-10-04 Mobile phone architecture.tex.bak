\documentclass{article}

\usepackage[%
    left=0.5in,%
    right=0.5in,%
    top=0.5in,%
    bottom=0.5in,%
]{geometry}%
\usepackage{minitoc}
\usepackage{multicol}
\usepackage{graphicx}
\usepackage{fixltx2e}
\usepackage{listings}
\usepackage{color}
\usepackage{hyperref}
    \hypersetup{ colorlinks = true, linkcolor = blue }
\usepackage{blindtext}
\definecolor{lightgray}{gray}{0.9}
\graphicspath{ {./} }

\newcommand{\inlinecode}[2]{\colorbox{lightgray}{\lstinline
[language=#1]$#2$}}
\newcommand{\worddef}[1]{\hyperref[sec:reference]{\textit{#1}}}

\begin{document}

\tableofcontents

\newpage

\section{Hardware}

\subsection{Motherboard}
\begin{flushleft}
Motherboards generally consist of 
\begin{itemize}
	\item CPU
	\item Northbridge - Memory controller hub
	\item Southbridge - I/O controller hub
	\item RAM
	\item Disks (i.e. HDD/SSD)
	\item Several functional cards	
\end{itemize}
\end{flushleft}

\subsection{Connections}
\begin{itemize}
  \item CPU and RAM chips have a bus that connects it to the other devices.
  \begin{itemize}
    \item They act like a bridge connecting the two
  \end{itemize}
  \item Nowadays more advanced buses are used, which can allow up to 333MB/s speeds
  \begin{itemize}
    \item This depends on a bus width.
    \item More wires allow more data to be transferred, however result in a larger chip size.
  \end{itemize}
   \item Having more chips and connections can lead to communication overhead / voltage drop, which results in more power usage
\end{itemize}

\section{System on a chip (Soc)}

\begin{flushleft}
A system on a chip or system on chip (SoC) is an integrated circuit (also known as a "chip") that integrates \textbf{all} components of a computer or other electronic system. It aims to reduce communications overhead. In here transistors provide computation \textbf{as well as} storage. PoP technology also enables smaller packages with shorter electrical connections
\end{flushleft}

\section{Package-on-Package}

\begin{flushleft}
Due to RAM not being included in Soc (because it uses a lot of space) we have to put it somewhere else. So we put a separate package \textbf{on top of the SoC}, which is called Package-on-Package or PoP for short. This helps to seperate memory and logic productions as well as allowing multiple components to share RAM.
\end{flushleft}

\section{ARM CPUs}

Almost all (95\%) of smart phones use ARM CPUs. It's sold as \textbf{a design} not a physical device.
\begin{itemize}
  \item SoC processor cores often use the ARM architecture because it is a soft processor specified as an IP core and more power efficient than x86.
  \item Chip manufactures can add ARM CPU to bespoke SoC vs
buying a chip from Intel
  \item Fast and efficient
  \begin{itemize}
    \item Good for mobile applications
    \item Best use of battery (more instructions $\rightarrow$ more battery usage)
  \end{itemize}
  \item High code density
  \begin{itemize}
    \item Only includes simple instructions that can be excetured in one clock cycle. (e.g. no divide instruction)
    \item Less moving stuff around, best use of space
  \end{itemize}
\end{itemize}

\subsection{ARM architecture}

Only includes simple instructions that can be executed in one clock cycle
\begin{itemize}
  \item This means lack of certain instructions like division, but this can be implememented in the compiling stage
  \item It can only operate on registers, where as x86 can operate on direct memory as well
\end{itemize}
Registers
\begin{itemize}
  \item 16 registers
  \item Load/Store architecture
  \item Each instruction 32-bits long
  \item Constants must fit into the 32-bit instruction width. Meaning that they \textbf{can't utilise all 32bits}, as 12bits are required for the register
\end{itemize}

\subsection{ARM conditional execution}

\begin{flushleft}
Traditional approach is to execute a compare branch if the condition is met, however branches are 'expensive' (difficult to make parallel efficiently). ARM allows \textbf{any instruction} to made conditional. Thus removes the need for an expensive branch and leads to smaller code footprint.
\end{flushleft}

\subsection{ARM and Thumb}

\begin{flushleft}
Every ARM instruction is 32 bits long. This can take up a lot of memory thus slowing execution down with constant memory requests. This is attempted to solve by using thumb. Thumb is a 16-bit version of the ARM instruction set and it's of variable length. This was done by taking \textbf{the most popular} ARM instructions used and encoding them as 16bit values.
\end{flushleft}

\subsection{ARM big.LITTLE}
ARM's latest processor contains two cores
\begin{itemize}
  \item 2.3 GHz quad core optimised for performance (big core). Having high power and performance
  \item 1.7 GHz quad core optimised for energy efficiency (LITTLE core). Having low power and performance 
\end{itemize}
Two Cores are architecturally consistent. System can switch between the two as appropriate for the task in hand. This has an advantage of being able to choose less powerfull core for background tasks like: alarm clock, notifications, etc.

\pagebreak
\section*{Reference section} \label{sec:reference}
\begin{description}
	\item[placeholder] \hfill \\
\end{description}
\end{document}
