\documentclass{article}

\usepackage[%
    left=0.5in,%
    right=0.5in,%
    top=0.5in,%
    bottom=0.5in,%
]{geometry}%
\usepackage{minitoc}
\usepackage{multicol}
\usepackage{graphicx}
\usepackage{fixltx2e}
\usepackage{listings}
\usepackage{color}
\usepackage{hyperref}
    \hypersetup{ colorlinks = true, linkcolor = blue }
\usepackage{blindtext}
\definecolor{lightgray}{gray}{0.9}
\graphicspath{ {./} }

\newcommand{\inlinecode}[2]{\colorbox{lightgray}{\lstinline
[language=#1]$#2$}}
\newcommand{\worddef}[1]{\hyperref[sec:reference]{\textit{#1}}}

\lstset{
  frame=none,
  xleftmargin=2pt,
  stepnumber=1,
  numbers=left,
  numbersep=5pt,
  numberstyle=\ttfamily\tiny\color[gray]{0.3},
  belowcaptionskip=\bigskipamount,
  captionpos=b,
  escapeinside={*'}{'*},
  language=haskell,
  tabsize=2,
  emphstyle={\bf},
  commentstyle=\it,
  stringstyle=\mdseries\rmfamily,
  showspaces=false,
  keywordstyle=\bfseries\rmfamily,
  columns=flexible,
  basicstyle=\small\sffamily,
  showstringspaces=false,
  morecomment=[l]\%,
}
\usepackage{fancyvrb}
\DefineVerbatimEnvironment{code}{Verbatim}{fontsize=\small}

\begin{document}

\tableofcontents

\newpage

\section{Task 1}

\section{Task 2}

\subsection{Repeat until}

\subsubsection{MTIR}

\begin{flushleft}
Update the MiniTriangle Internal Representation inside, so we can stored typed version
\end{flushleft}
\begin{code}
    -- | Repeat until
    | CmdRepeat {
          crCond    :: Expression,      -- ^ Loop-condition
          crBody    :: Command,         -- ^ Loop-body
          cmdSrcPos :: SrcPos
      }
\end{code}

\subsection{TypeChecker}
\begin{flushleft}
Add a pattern match for type checking AST \texttt{CmdRepeat} data type
\end{flushleft}
\begin{code}
-- T-REPEAT
chkCmd env (A.CmdRepeat {A.crCond = e, A.crBody = c, A.cmdSrcPos = sp}) = do
    e' <- chkTpExp env e Boolean                        -- env |- e : Boolean
    c' <- chkCmd env c                                  -- env |- c
    return (CmdRepeat {crCond = e', crBody = c', cmdSrcPos = sp})
\end{code}

\subsection{PPMTIR}
\begin{flushleft}
Now need a way to print the typed repeat command. We do this by adding a \texttt{CmdRepeat} pattern match to \texttt{ppCommand}
\end{flushleft}
\begin{code}
ppCommand n (CmdRepeat {crCond = e, crBody = c, cmdSrcPos = sp}) =
    indent n . showString "CmdRepeat" . spc . ppSrcPos sp . nl
    . ppCommand (n+1) c
    . ppExpression (n+1) e
\end{code}

\subsection{Character literal}

\subsection{Type}
\begin{flushleft}
Firstly we add \texttt{Character} to Type data type
\end{flushleft}
\begin{code}
| Character           -- ^ The Character type
\end{code}
\begin{flushleft}
Next inside \texttt{instance Eq Type where} we add an equality operator pattern for it.
\end{flushleft}
\begin{flushleft}
Character  == Character  = True
\end{flushleft}




\end{document}
